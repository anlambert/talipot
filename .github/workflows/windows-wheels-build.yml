name: windows-wheels-build
on: [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  windows:
    name: Talipot Python ${{ matrix.python-version }} wheel build on windows
    runs-on: windows-latest
    env:
      VCPKG_INSTALL_DIR: ${{ github.workspace }}\vcpkg\installed\x64-windows-release
      TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Checkout Talipot code
        uses: actions/checkout@v4
      - name: Install MSYS2 shell
        uses: msys2/setup-msys2@v2
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: python-install
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install build and twine Python packages
        run: |
          set PATH=%Python3_ROOT_DIR%\Scripts;%PATH%
          pip install twine build
      - name: Install build dependencies with vcpkg
        uses: johnwason/vcpkg-action@v7
        id: vcpkg
        with:
          pkgs: zlib
            zstd
            qhull
            yajl
            libgit2
            graphviz
          triplet: x64-windows-release
          extra-args: --allow-unsupported --recurse --keep-going
          token: ${{ github.token }}
      - name: Sets CIBW_BUILD environment variable
        env:
          pyVer: "${{matrix.python-version}}"
        run: |
          echo "CIBW_BUILD=cp${pyVer/./}-win_amd64" >> $GITHUB_ENV
        shell: msys2 {0}
      - name: Build Talipot wheel with cibuildwheel
        run: |
          set PATH=%Python3_ROOT_DIR%\Scripts;%PATH%
          set CMAKE_INCLUDE_PATH=%VCPKG_INSTALL_DIR%/include;^
          %VCPKG_INSTALL_DIR%/include/graphviz
          set CMAKE_LIBRARY_PATH=%VCPKG_INSTALL_DIR%/bin;^
          %VCPKG_INSTALL_DIR%/lib
          pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            delvewheel repair -v -w {dest_dir} --analyze-existing
            --add-path ${{ env.VCPKG_INSTALL_DIR }}\bin
            --exclude gzstream-talipot-1_0.dll;OGDF-talipot-1_0.dll;talipot-core-1_0.dll;talipot-ogdf-1_0.dll
            {wheel}
      - name: Test built wheel can be installed and imported
        working-directory: wheelhouse
        run: |
          set PATH=%Python3_ROOT_DIR%\Scripts:%PATH%
          set PYTHONIOENCODING=utf-8
          for /f "tokens=*" %%g in ('dir /b *.whl') do (set wheel=%%g)
          pip install %wheel%
          python -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
          python -c "from talipot import tlp; print(tlp.getImportPluginsList())"
      - uses: actions/upload-artifact@v4
        with:
          name: talipot-wheel-${{ matrix.python-version }}
          path: ./wheelhouse/*.whl
      - name: Publish Talipot wheel to TestPyPI
        working-directory: wheelhouse
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          set PATH=%Python3_ROOT_DIR%\Scripts;%PATH%
          for /f "tokens=*" %%g in ('dir /b *.whl') do (set wheel=%%g)
          twine check %wheel%
          twine upload --skip-existing %wheel%
