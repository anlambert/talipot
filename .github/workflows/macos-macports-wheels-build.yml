name: macos-macports-wheels-build
on: [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  macos:
    name: Talipot wheel build for Python ${{ matrix.python-version }}
      on ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        config:
          - os: macos-13
            macosx_deployment_target: "12.0"
          - os: macos-14
            macosx_deployment_target: "14.0"

    env:
      CLANG_VERSION: 19
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.config.macosx_deployment_target }}
      TWINE_REPOSITORY: https://test.pypi.org/legacy/
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

    steps:
      - name: Checkout Talipot code
        uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: python-install
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install sip, build, twine and wheel Python packages
        run: |
          which python
          python --version
          sudo pip install sip twine wheel build
      - name: Get wheel next dev version
        run: |
          JSON=$(curl -s 'https://test.pypi.org/pypi/talipot/json')
          LAST_VERSION=$(echo $JSON | python -c "
          import sys, json
          print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)

          if [ $? -ne 0 ]
          then
            DEV_VERSION=1
          else
            echo last wheel dev version = $LAST_VERSION

            # check if dev wheel version needs to be incremented
            VERSION_INCREMENT=$(echo $JSON | python -c "
          import sys, json, platform
          from wheel._bdist_wheel import get_abi_tag
          releases = json.load(sys.stdin)['releases']['$LAST_VERSION']
          machine = platform.uname().machine
          abi_tag = get_abi_tag() + '-'
          print(any(['macosx' in r['filename'] and machine in r['filename'] and abi_tag in r['filename'] for r in releases]))")
            DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')

            if [ "$VERSION_INCREMENT" == "True" ]
            then
              let DEV_VERSION+=1
            fi
          fi
          echo current wheel dev version = $DEV_VERSION
          echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
      - name: Prepare ccache timestamp
        id: get-current-date
        run: |
          echo "date=$(date -u "+%Y-%m-%d-%H-%m-%S")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache files
        uses: actions/cache@v4
        with:
          path: |
            /Users/runner/Library/Caches/ccache
            /Users/runner/.macports-ci-ccache
          key: macos-wheels-ccache-${{ matrix.python-version }}-${{ steps.get-current-date.outputs.date }}
          restore-keys: |
            ${{ matrix.config.os }}-ccache-${{ matrix.python-version }}-
          save-always: true

      - name: Install MacPorts
        run: |
          curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
          source ./macports-ci install --sync=rsync
      - name: Install Talipot build dependencies
        run: sudo port -N install
          cmake
          clang-${{ env.CLANG_VERSION }}
          bison
          zlib
          zstd
          libomp
          qhull
          yajl
          libgit2
          graphviz
      - name: Create build directory
        run: mkdir build
      - name: Build Talipot Python wheels
        working-directory: ./build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DCMAKE_C_COMPILER=/opt/local/bin/clang-mp-${{ env.CLANG_VERSION }} \
            -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++-mp-${{ env.CLANG_VERSION }} \
            -DTALIPOT_ACTIVATE_PYTHON_WHEEL_TARGET=ON \
            -DTALIPOT_PYTHON_TEST_WHEEL_SUFFIX=a3.dev${{ env.DEV_VERSION }}\
            -DPython3_EXECUTABLE=$Python3_ROOT_DIR/bin/python3 \
            -DTALIPOT_USE_CCACHE=ON \
            -DTALIPOT_BUILD_CORE_ONLY=ON \
            -DTALIPOT_BUILD_DOC=OFF
          make -j4 test-wheel
      - name: Test built wheel can be installed and imported
        working-directory: ./build/library/talipot-python/bindings/talipot-core/talipot_module/dist
        run: |
          pip install $(ls -t | head -1)
          python -c "
          from talipot import tlp
          from platform import python_version
          print('Talipot %s successfully imported in Python %s' %
                (tlp.getRelease(), python_version()))
          "
      - name: Upload Talipot Python wheel on test PyPI
        if: github.ref == 'refs/tags/dev-latest'
        working-directory: ./build
        run: make test-wheel-upload
      - name: Test uploaded wheel in clean environment
        if: github.ref == 'refs/tags/dev-latest'
        run: |
          os_ver=$(sw_vers -productVersion | cut -c1-2)
          sudo port -N -f uninstall \
            cmake \
            clang-${CLANG_VERSION} \
            qhull \
            yajl \
            libgit2 \
            graphviz

          pyVer="${{ matrix.python-version }}"

          sudo port -N install \
            python${pyVer/./} \
            py${pyVer/./}-pip

          sudo pip-$pyVer install --index-url https://test.pypi.org/simple/ talipot
          python$pyVer -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
          python$pyVer -c "from talipot import tlp; print(tlp.getImportPluginsList())"
