# Talipot continuous integration on Linux and Mac OS platforms through TravisCI.
# Two type of builds can be performed:
#  - a "legacy" Talipot build (Linux only) using :
#     * default system compiler (GCC 7.4)
#     * Qt 5.9
#     * Python 2.7
#  - a "modern" Talipot build using:
#     * recent compiler (GCC 9 on Linux, clang 10 from MacPorts or Homebrew on Mac OS)
#     * Qt 5.14 on Linux, Qt 5.14 from MacPorts on MacOS, Qt 5.15 from Homebrew on Mac OS
#     * Python 3.8 on Linux, Python 2.7 on MacOS
# As TravisCI limits build job times to 45 minutes, Talipot is built in two successive stages
# to avoid timeouts (which happened often with MacOs builds):
#  - a core build with no Talipot OpenGL and Qt components
#  - a complete build including OpenGL and Qt components
# The trick is to use travis build cache and ccache to cache already compiled object
# files between stages and thus not exceeding Travis build timeout limits

# inform travis that we are building a cpp project
language: cpp

# define build jobs
jobs:
  include:
  #=============================================================================================
    # Talipot core build stage on Linux
    - stage: Talipot core build (Linux)
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
    # legacy Talipot core build on Linux
      os: linux
      dist: bionic
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build with cmake
        - cmake .. -G Ninja
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_BUILD_CORE_ONLY=ON
            -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja runTests

    #-------------------------------------------------------------------------------------------
    # modern Talipot core build on Linux
    -
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: focal
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3
            - libpython3-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
      env:
        # use Python 3.8
        - PYTHON_EXECUTABLE=/usr/bin/python3

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build with cmake
        - cmake .. -G Ninja
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_BUILD_CORE_ONLY=ON
            -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja runTests

  #=============================================================================================
    # Talipot complete build stage on Linux
    - stage: Talipot complete build (Linux)
      # legacy Talipot complete build on Linux, we also build the documentation in this one
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      compiler: gcc
      cache: ccache
      services:
        - xvfb
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - python-pip
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
            - qt5-default
            - libqt5webkit5-dev
            - libquazip5-dev
            - libglew-dev
            - libfreetype6-dev
      install:
        # install latest sphinx version for generating the documentation
        - sudo pip install "sphinx<3"
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot complete build with cmake
        - cmake .. -G Ninja
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_BUILD_DOC=ON
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja runTests

    #-------------------------------------------------------------------------------------------
    # modern Talipot complete build on Linux
    -
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: focal
      compiler: gcc
      cache: ccache
      services:
        - xvfb
      addons:
        apt:
          sources:
            - sourceline: 'deb http://archive.neon.kde.org/user/ focal main'
              key_url: 'http://archive.neon.kde.org/public.key'
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3
            - libpython3-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
            - qt5-default
            - libqt5webkit5-dev
            - libquazip5-dev
            - libglew-dev
            - libfreetype6-dev
      env:
        # use Python 3.8
        - PYTHON_EXECUTABLE=/usr/bin/python3
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot complete build using cmake
        - cmake .. -G Ninja
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_BUILD_DOC=OFF
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja runTests
  #==============================================================================================================================================================
    # Talipot-Python wheel build on manylinux2010
    - stage: Talipot-Python wheels build (manylinux2010)
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      addons:
        apt:
          packages:
            - python-pip
            - python3-pip
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64

      services:
        - docker

      before_install:
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - |
          JSON=$(curl -s 'https://test.pypi.org/pypi/talipot/json')
          LAST_VERSION=$(echo $JSON | python -c "
          import sys, json
          print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)
          DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')
          let DEV_VERSION+=1
          echo current wheel dev version = $DEV_VERSION
          sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache \
            -v `pwd`:/talipot:rw ${DOCKER_IMAGE} /bin/bash -c \
            "bash -xe /talipot/bundlers/linux/talipot_python_wheels_manylinux_build.sh \
              dev$DEV_VERSION $TEST_PYPI_API_TOKEN $TRAVIS_BRANCH"

        - cd tests/python

        - pip2 install --upgrade pip --user
        - pip2 install --index-url https://test.pypi.org/simple/ talipot --user
        - python -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python -m unittest discover

        - pip3 install --upgrade pip --user
        - pip3 install --index-url https://test.pypi.org/simple/ talipot --user
        - python3 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python3 -m unittest discover
  #=============================================================================================
    # Talipot AppImage build on CentOS
    - stage: Talipot AppImage build (CentOS)
      # Talipot x86_64 AppImage build on CentOS 7
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=centos:7

      services:
        - docker
        - xvfb

      before_install:
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - sudo docker run
            --rm=true
            -e CCACHE_DIR=/ccache --volumes-from ccache
            -v `pwd`:/talipot:rw -e DISPLAY=$DISPLAY
            -v /tmp/.X11-unix:/tmp/.X11-unix
            ${DOCKER_IMAGE}
            /bin/bash -c "bash -xe /talipot/bundlers/linux/talipot_appimage_centos7_build.sh CCACHE RUN_TESTS"

      # deploy Talipot AppImage on bintray
      deploy:
        provider: bintray
        skip_cleanup: true
        on:
          branch: master
        file: "build/deploy/TalipotPackagesToBintray.json"
        user: "anlambert"
        key: "${BINTRAY_API_KEY}"
  #=============================================================================================
    # Talipot thirdparty build stage on Mac OS
    - stage: Talipot thirdparty build (Mac OS)
      if: commit_message !~ /\[ci-(windows)-only\]$/
    # Talipot core build on Mac OS (MacPorts)
      os: osx
      osx_image: xcode9.4
      compiler: clang
      cache: ccache
      install:
        # install MacPorts in order to easily retrieve Talipot dependencies
        - curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - source ./macports-ci install
        # install Talipot core build dependencies
        - sudo port -N install cmake
        - sudo port -N install clang-10
        - sudo port -N install ccache
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install zstd
      env:
        - ENV="MacOS 10.13, LLVM Clang, MacPorts"

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/opt/local/bin/clang-mp-10
            -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++-mp-10
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DZLIB_INCLUDE_DIR=/opt/local/include
            -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_BUILD_CORE_ONLY=ON || travis_terminate 1
        - make -j4 -C thirdparty || travis_terminate 1

    #-------------------------------------------------------------------------------------------
    # Talipot thirdparty build on Mac OS (Homebrew)
    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode11.3
      compiler: clang
      cache: ccache
      addons:
        homebrew:
          update: true
          # install Talipot core build dependencies
          packages:
            - ccache
            - cmake
            - llvm
            - qhull
            - yajl
            - zstd

      env:
        - ENV="MacOS 10.14, LLVM Clang, Homebrew"
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang
            -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DTALIPOT_BUILD_CORE_ONLY=ON
            -DTALIPOT_USE_CCACHE=ON || travis_terminate 1
        - make -j4 -C thirdparty || travis_terminate 1
  #=============================================================================================
    # Talipot core build stage on Mac OS
    - stage: Talipot core build (Mac OS)
      if: commit_message !~ /\[ci-(windows)-only\]$/
    # Talipot core build on Mac OS (MacPorts)
      os: osx
      osx_image: xcode9.4
      compiler: clang
      cache: ccache
      install:
        # install MacPorts in order to easily retrieve Talipot dependencies
        - curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - source ./macports-ci install
        # install Talipot core build dependencies
        - sudo port -N install cmake
        - sudo port -N install clang-10
        - sudo port -N install ccache
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install zstd
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit
      env:
        - ENV="MacOS 10.13, LLVM Clang, MacPorts"

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/opt/local/bin/clang-mp-10
            -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++-mp-10
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DZLIB_INCLUDE_DIR=/opt/local/include
            -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_USE_CCACHE=ON
            -DTALIPOT_BUILD_CORE_ONLY=ON || travis_terminate 1
        - make -j4 || travis_terminate 1
        - make -j4 install || travis_terminate 1
        # run Talipot unit tests
        - make runTests

    #-------------------------------------------------------------------------------------------
    # Talipot core build on Mac OS (Homebrew)
    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode11.3
      compiler: clang
      cache: ccache
      addons:
        homebrew:
          update: true
          # install Talipot core build dependencies
          packages:
            - ccache
            - cmake
            - llvm
            - qhull
            - yajl
            - zstd
            - cppunit
            - pkg-config

      env:
        - ENV="MacOS 10.14, LLVM Clang, Homebrew"
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang
            -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DTALIPOT_BUILD_CORE_ONLY=ON
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_USE_CCACHE=ON || travis_terminate 1
        - make -j4 || travis_terminate 1
        - make -j4 install || travis_terminate 1
        # run Talipot unit tests
        - make runTests

  #=============================================================================================
    # Talipot complete build stage on Mac OS
    - stage: Talipot complete build (Mac OS)
      if: commit_message !~ /\[ci-(windows)-only\]$/
    # Talipot complete build on Mac OS (MacPorts)
      os: osx
      osx_image: xcode9.4
      compiler: clang
      cache: ccache
      before_install:
        - start_time=$(travis_nanoseconds)
      install:
        # install MacPorts in order to easily retrieve Talipot dependencies
        - curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - source ./macports-ci install
        # install Talipot complete build dependencies
        - sudo port -N install cmake
        - sudo port -N install clang-10
        - sudo port -N install ccache
        - sudo port -N install qt5-qtbase
        - sudo port -N install qt5-qttools
        - sudo port -N install qt5-qtwebkit
        - sudo port -N install quazip
        - sudo port -N install freetype
        - sudo port -N install glew
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install zstd
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit
        - curl -O https://bootstrap.pypa.io/get-pip.py
        - sudo python get-pip.py
        - sudo pip install "sphinx<3" --ignore-installed six
      env:
        - ENV="MacOS 10.13, LLVM Clang, MacPorts"

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot complete build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/opt/local/bin/clang-mp-10
            -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++-mp-10
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_USE_CCACHE=ON
            -DZLIB_INCLUDE_DIR=/opt/local/include
            -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib
            -DGLEW_SHARED_LIBRARY_RELEASE=/opt/local/lib/libGLEW.dylib
        - make -j4
        - make -j4 install
        # run Talipot unit tests
        - make runTests
        # compute overall build time
        - end_time=$(travis_nanoseconds)
        - build_time=$(( (end_time-start_time) / (6 * (10 ** 10)) ))
        - echo "build time = $build_time minutes"
        - | # skip dmg bundle generation if there is not enough time remaining for the travis job
          if (( build_time <= 40 ))
          then
            # build Talipot bundle
            make bundle
          fi
        - cd ..

      # deploy Talipot MacOS bundle on bintray
      deploy:
        provider: bintray
        skip_cleanup: true
        on:
          branch: master
        file: "build/deploy/TalipotPackagesToBintray.json"
        user: "anlambert"
        key: "${BINTRAY_API_KEY}"
    #-------------------------------------------------------------------------------------------
    # Talipot complete build on Mac OS (Homebrew)
    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode11.3
      compiler: clang
      cache: ccache
      addons:
        homebrew:
          update: true
          # install Talipot complete build dependencies
          packages:
            - ccache
            - cmake
            - llvm
            - qhull
            - yajl
            - zstd
            - cppunit
            - pkg-config
            - glew
            - freetype
            - qt5
            - quazip

      env:
        - ENV="MacOS 10.14, LLVM Clang, Homebrew"

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot build using cmake
        - cmake .. -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang
            -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++
            -DPYTHON_EXECUTABLE=/usr/bin/python2.7
            -DCMAKE_PREFIX_PATH=/usr/local/opt/qt
            -DTALIPOT_BUILD_TESTS=ON
            -DTALIPOT_BUILD_DOC=OFF
            -DTALIPOT_USE_CCACHE=ON || travis_terminate 1
        - make -j4 || travis_terminate 1
        - make -j4 install || travis_terminate 1
        # run Talipot unit tests
        - make runTests

  #=============================================================================================
    # Talipot-Python wheel build on MacOS
    - stage: Talipot-Python wheels build (Mac OS)
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode9.4
      compiler: clang
      cache: ccache
      install:
        - |
          cat > ~/.pypirc << EOF
          [distutils]
          index-servers=
              testpypi
          [testpypi]
          repository: https://test.pypi.org/legacy/
          username: __token__
          password: $TEST_PYPI_API_TOKEN
        - curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - source ./macports-ci install
        - sudo port -N install cmake
        - sudo port -N install clang-10
        - sudo port -N install ccache
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install zstd
        - curl -LO https://www.python.org/ftp/python/2.7.17/python-2.7.17-macosx10.9.pkg
        - sudo installer -pkg python-2.7.17-macosx10.9.pkg -target /
        - sudo /Library/Frameworks/Python.framework/Versions/2.7/bin/pip install wheel
        - curl -LO https://www.python.org/ftp/python/3.7.6/python-3.7.6-macosx10.9.pkg
        - sudo installer -pkg python-3.7.6-macosx10.9.pkg -target /
        - sudo /Library/Frameworks/Python.framework/Versions/3.7/bin/pip3 install wheel
        - curl -LO https://www.python.org/ftp/python/3.8.1/python-3.8.1-macosx10.9.pkg
        - sudo installer -pkg python-3.8.1-macosx10.9.pkg -target /
        - sudo /Library/Frameworks/Python.framework/Versions/3.8/bin/pip3 install wheel
        - sudo /Library/Frameworks/Python.framework/Versions/3.8/bin/pip3 install twine

      env:
        - ENV="MacOS 10.13, LLVM Clang, MacPorts"

      script:
        - |
          JSON=$(curl -s 'https://test.pypi.org/pypi/talipot/json')
          LAST_VERSION=$(echo $JSON | python -c "
          import sys, json
          print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)
          echo last wheel dev version = $LAST_VERSION
          VERSION_INCREMENT=$(echo $JSON | python -c "
          import sys, json
          releases = json.load(sys.stdin)['releases']['$LAST_VERSION']
          print(any(['macosx' in r['filename'] for r in releases]))")
          DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')
          if [ "$VERSION_INCREMENT" == "True" ]
          then
            let DEV_VERSION+=1
          fi
          echo current wheel dev version = $DEV_VERSION
        - mkdir build && cd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$PWD/install
          -DCMAKE_C_COMPILER=/opt/local/bin/clang-mp-10
          -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++-mp-10
          -DTALIPOT_ACTIVATE_PYTHON_WHEEL_TARGET=ON
          -DTALIPOT_PYTHON_TEST_WHEEL_SUFFIX=dev$DEV_VERSION
          -DPYTHON_EXECUTABLE=/Library/Frameworks/Python.framework/Versions/2.7/bin/python
          -DZLIB_INCLUDE_DIR=/opt/local/include
          -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib
          -DTALIPOT_USE_CCACHE=ON
          -DTALIPOT_BUILD_CORE_ONLY=ON || travis_terminate 1
        - make -j4 test-wheel || travis_terminate 1
        - cmake ..
          -DPYTHON_EXECUTABLE=/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 || travis_terminate 1
        - make -j4 test-wheel || travis_terminate 1
        - cmake ..
          -DPYTHON_EXECUTABLE=/Library/Frameworks/Python.framework/Versions/3.8/bin/python3 || travis_terminate 1
        - make -j4 test-wheel || travis_terminate 1
        - |
          if [ "$TRAVIS_BRANCH" == "master" ]
          then
            make test-wheel-upload
          fi

    - stage: Talipot-Python wheel installation tests (macos)
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode9.4
      env:
        - PYTHON_PROVIDER=Apple
      script:
        - cd tests/python
        - python --version
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - sudo python get-pip.py
        - sudo pip install --index-url https://test.pypi.org/simple/ talipot
        - python -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python -m unittest discover

    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode10
      env:
        - PYTHON_PROVIDER=Python.org
      install:
        - curl -LO https://www.python.org/ftp/python/2.7.17/python-2.7.17-macosx10.9.pkg
        - sudo installer -pkg python-2.7.17-macosx10.9.pkg -target /
        - curl -LO https://www.python.org/ftp/python/3.7.6/python-3.7.6-macosx10.9.pkg
        - sudo installer -pkg python-3.7.6-macosx10.9.pkg -target /
      script:
        - cd tests/python
        - python2.7 --version
        - sudo pip2.7 install --index-url https://test.pypi.org/simple/ talipot
        - python2.7 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python2.7 -m unittest discover
        - sudo pip3.7 install --index-url https://test.pypi.org/simple/ talipot
        - python3.7 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python3.7 -m unittest discover

    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode11
      env:
        - PYTHON_PROVIDER=MacPorts
      install:
        - export COLUMNS=80
        - wget https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - source ./macports-ci install
        - sudo port -N install python27
        - sudo port -N install py27-pip
        - sudo port -N install python37
        - sudo port -N install py37-pip
      script:
        - cd tests/python
        - python2.7 --version
        - sudo pip-2.7 install --index-url https://test.pypi.org/simple/ talipot
        - python2.7 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python2.7 -m unittest discover
        - sudo pip-3.7 install --index-url https://test.pypi.org/simple/ talipot
        - python3.7 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python3.7 -m unittest discover

    -
      if: commit_message !~ /\[ci-(windows)-only\]$/
      os: osx
      osx_image: xcode11
      env:
        - PYTHON_PROVIDER=Homebrew
      addons:
        homebrew:
          packages:
            - python2
            - python3
      script:
        - cd tests/python
        - python2.7 --version
        - sudo pip2.7 install --index-url https://test.pypi.org/simple/ talipot
        - python2.7 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python2.7 -m unittest discover
        - sudo pip3 install --index-url https://test.pypi.org/simple/ talipot
        - python3 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python3 -m unittest discover
