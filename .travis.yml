language: cpp

# define build jobs
jobs:
  include:
    #==============================================================================================================================================================
    # Tulip-Python wheels build on manylinux1
    - stage: Tulip-Python wheels build (manylinux1, manylinux2010)
      os: linux
      dist: trusty
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=quay.io/pypa/manylinux1_x86_64

      services:
        - docker

      before_install:
        - echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock
            -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
        - sudo service docker restart
        - sleep 5
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script: |
        LAST_VERSION=$(curl -s 'https://test.pypi.org/pypi/tulipe-python/json' | \
          python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)
        if [ "$?" != "0" ]
        then
          DEV_VERSION=0
        else
          DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')
          let DEV_VERSION+=1
        fi
        sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache \
          --cap-add SYS_ADMIN -v `pwd`:/tulip:rw ${DOCKER_IMAGE} /bin/bash -c \
          "bash -xe /tulip/bundlers/linux/tulip_python_wheels_manylinux_build.sh \
            dev$DEV_VERSION $TEST_PYPI_API_TOKEN"

    # Tulip-Python wheels build on manylinux2010
    -
      os: linux
      dist: trusty
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64

      services:
        - docker

      before_install:
        - echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock
            -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
        - sudo service docker restart
        - sleep 5
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script: |
        LAST_VERSION=$(curl -s 'https://test.pypi.org/pypi/tulipe-python/json' | \
          python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)
        if [ "$?" != "0" ]
        then
          DEV_VERSION=0
        else
          DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')
          let DEV_VERSION+=1
        fi
        sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache \
          --cap-add SYS_ADMIN -v `pwd`:/tulip:rw ${DOCKER_IMAGE} /bin/bash -c \
          "bash -xe /tulip/bundlers/linux/tulip_python_wheels_manylinux_build.sh \
            dev$DEV_VERSION $TEST_PYPI_API_TOKEN"

    - stage: Tulip-Python wheels deployment test (manylinux1, manylinux2010)
      # Python 2.7 on trusty
      os: linux
      dist: trusty
      addons:
        apt:
          packages:
            - python-pip
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        - pip install --index-url https://test.pypi.org/simple/ tulipe-python --user
        - python -c "from tulip import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - cd tests/python
        - TULIP_BUILD_DIR= python -m unittest discover

    -
      # Python 3.7 on xenial
      os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - deadsnakes
          packages:
            - python3.7
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python3.7
      script:
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - python3.7 get-pip.py --user
        - pip3.7 install --index-url https://test.pypi.org/simple/ tulipe-python --user
        - python3.7 -c "from tulip import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - cd tests/python
        - TULIP_BUILD_DIR= python3.7 -m unittest discover
