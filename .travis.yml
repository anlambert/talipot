# Talipot continuous integration on Linux and Mac OS platforms through TravisCI.
# Two type of builds can be performed:
#  - a "legacy" Talipot build (Linux only) using :
#     * default system compiler (GCC 5.4)
#     * Qt 5.5
#     * Python 2.7
#  - a "modern" Talipot build using:
#     * recent compiler (GCC 9 on Linux, clang 9.0 from MacPorts or Homebrew on Mac OS)
#     * Qt 5.13 on Linux, Qt 5.12 from MacPorts on MacOS, Qt 5.13 from Homebrew on Mac OS
#     * Python 3.7 on Linux, Python 2.7 on MacOS
# As TravisCI limits build job times to 45 minutes, Talipot is built in two successive stages
# to avoid timeouts (which happened often with MacOs builds):
#  - a core build with no Talipot OpenGL and Qt components
#  - a complete build including OpenGL and Qt components
# The trick is to use travis build cache and ccache to cache already compiled object
# files between stages and thus not exceeding Travis build timeout limits

# inform travis that we are building a cpp project
language: cpp

# define build jobs
jobs:
  include:
  #=============================================================================================

    # Talipot AppImage build on CentOS
    - stage: Talipot AppImage build (CentOS)
      # Talipot x86_64 AppImage build on CentOS 6
      os: linux
      dist: trusty
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=centos:7

      services:
        - docker

      before_install:
        - echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
        - sudo service docker restart
        - sleep 5
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      before_script:
        - export DISPLAY=:99.0
        - sh -e /etc/init.d/xvfb start
        - sleep 3

      script:
        - sudo docker run
            --rm=true
            -e CCACHE_DIR=/ccache --volumes-from ccache
            --cap-add SYS_ADMIN
            --device /dev/fuse:/dev/fuse:mrw
            -v `pwd`:/talipot:rw -e DISPLAY=$DISPLAY
            -v /tmp/.X11-unix:/tmp/.X11-unix
            ${DOCKER_IMAGE}
            /bin/bash -c "bash -xe /talipot/bundlers/linux/talipot_appimage_centos7_build.sh CCACHE RUN_TESTS"

      # deploy Talipot AppImage on bintray
      deploy:
        provider: bintray
        skip_cleanup: true
        on:
          branch: talipot-appimage-centos7
        file: "build/deploy/TalipotPackagesToBintray.json"
        user: "anlambert"
        key:
          secure: "${BINTRAY_API_KEY}"

