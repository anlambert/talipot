# Talipot continuous integration on Linux and Mac OS platforms through TravisCI.
# Two type of builds can be performed:
#  - a "legacy" Talipot build (Linux only) using :
#     * default system compiler (GCC 7.4)
#     * Qt 5.9
#     * Python 2.7
#  - a "modern" Talipot build using:
#     * recent compiler (GCC 9 on Linux, clang 10 from MacPorts or Homebrew on Mac OS)
#     * Qt 5.14 on Linux, Qt 5.14 from MacPorts on MacOS, Qt 5.15 from Homebrew on Mac OS
#     * Python 3.8 on Linux, Python 2.7 on MacOS
# As TravisCI limits build job times to 45 minutes, Talipot is built in two successive stages
# to avoid timeouts (which happened often with MacOs builds):
#  - a core build with no Talipot OpenGL and Qt components
#  - a complete build including OpenGL and Qt components
# The trick is to use travis build cache and ccache to cache already compiled object
# files between stages and thus not exceeding Travis build timeout limits

# inform travis that we are building a cpp project
language: cpp

# define build jobs
jobs:
  include:
    #=============================================================================================
    # Talipot core build stage on Linux
    - stage: Talipot core build (Linux)
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      # legacy Talipot core build on Linux
      os: linux
      dist: bionic
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build with cmake
        - cmake .. -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$PWD/install
          -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
          -DTALIPOT_BUILD_TESTS=ON
          -DTALIPOT_USE_CCACHE=ON
          -DTALIPOT_BUILD_CORE_ONLY=ON
          -DTALIPOT_BUILD_DOC=OFF
          -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja tests

    #-------------------------------------------------------------------------------------------
    # modern Talipot core build on Linux
    - if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: focal
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3
            - libpython3-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
      env:
        # use Python 3.8
        - PYTHON_EXECUTABLE=/usr/bin/python3

      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot core build with cmake
        - cmake .. -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$PWD/install
          -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
          -DTALIPOT_BUILD_TESTS=ON
          -DTALIPOT_USE_CCACHE=ON
          -DTALIPOT_BUILD_CORE_ONLY=ON
          -DTALIPOT_BUILD_DOC=OFF
          -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja tests

    #=============================================================================================
    # Talipot complete build stage on Linux
    - stage: Talipot complete build (Linux)
      # legacy Talipot complete build on Linux, we also build the documentation in this one
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      compiler: gcc
      cache: ccache
      services:
        - xvfb
      addons:
        apt:
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - python-pip
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
            - qt5-default
            - libqt5webkit5-dev
            - libquazip5-dev
            - libglew-dev
            - libfreetype6-dev
            - libfontconfig-dev
      install:
        # install sphinx for generating the documentation
        - sudo pip install sphinx
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot complete build with cmake
        - cmake .. -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$PWD/install
          -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
          -DTALIPOT_BUILD_TESTS=ON
          -DTALIPOT_USE_CCACHE=ON
          -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja tests

    #-------------------------------------------------------------------------------------------
    # modern Talipot complete build on Linux
    - if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: focal
      compiler: gcc
      cache: ccache
      services:
        - xvfb
      addons:
        apt:
          sources:
            - sourceline: "deb http://archive.neon.kde.org/user/ focal main"
              key_url: "http://archive.neon.kde.org/public.key"
          # install Talipot build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3
            - python3-pip
            - doxygen
            - libpython3-dev
            - libcppunit-dev
            - binutils-dev
            - libzstd-dev
            - qt5-default
            - libqt5webkit5-dev
            - libquazip5-dev
            - libglew-dev
            - libfreetype6-dev
            - libfontconfig-dev
      install:
        # install sphinx for generating the documentation
        - sudo pip3 install sphinx
      env:
        # use Python 3.8
        - PYTHON_EXECUTABLE=/usr/bin/python3
      script:
        # create build directory
        - mkdir build && cd build
        # configure Talipot complete build using cmake
        - cmake .. -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=$PWD/install
          -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}
          -DTALIPOT_BUILD_TESTS=ON
          -DTALIPOT_USE_CCACHE=ON
          -DTALIPOT_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Talipot using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Talipot unit tests
        - ninja tests
    #==============================================================================================================================================================
    # Talipot-Python wheel build on manylinux2010
    - stage: Talipot-Python wheels build (manylinux2010)
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      addons:
        apt:
          packages:
            - python-pip
            - python3-pip
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64

      services:
        - docker

      before_install:
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - |
          JSON=$(curl -s 'https://test.pypi.org/pypi/talipot/json')
          LAST_VERSION=$(echo $JSON | python -c "
          import sys, json
          print(json.load(sys.stdin)['info']['version'])" 2>/dev/null)
          DEV_VERSION=$(echo $LAST_VERSION | cut -f4 -d '.' | sed 's/dev//')
          let DEV_VERSION+=1
          echo current wheel dev version = $DEV_VERSION
          sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache \
            -v `pwd`:/talipot:rw ${DOCKER_IMAGE} /bin/bash -c \
            "bash -xe /talipot/bundlers/linux/talipot_python_wheels_manylinux_build.sh \
              dev$DEV_VERSION $TEST_PYPI_API_TOKEN $TRAVIS_BRANCH"

        - cd tests/python

        - pip2 install --upgrade pip --user
        - pip2 install --index-url https://test.pypi.org/simple/ talipot --user
        - python -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python -m unittest discover

        - pip3 install --upgrade pip --user
        - pip3 install --index-url https://test.pypi.org/simple/ talipot --user
        - python3 -c "from talipot import tlp; print(tlp.getLayoutAlgorithmPluginsList())"
        - TALIPOT_BUILD_DIR= python3 -m unittest discover
    #=============================================================================================
    # Talipot AppImage build on CentOS
    - stage: Talipot AppImage build (CentOS)
      # Talipot x86_64 AppImage build on CentOS 7
      if: commit_message !~ /\[ci-(macos|windows)-only\]$/
      os: linux
      dist: bionic
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=centos:7

      services:
        - docker
        - xvfb

      before_install:
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - sudo docker run
          --rm=true
          -e CCACHE_DIR=/ccache --volumes-from ccache
          -v `pwd`:/talipot:rw -e DISPLAY=$DISPLAY
          -v /tmp/.X11-unix:/tmp/.X11-unix
          ${DOCKER_IMAGE}
          /bin/bash -c "bash -xe /talipot/bundlers/linux/talipot_appimage_centos7_build.sh CCACHE RUN_TESTS"

      # deploy Talipot AppImage on bintray
      deploy:
        provider: bintray
        skip_cleanup: true
        on:
          branch: master
        file: "build/deploy/TalipotPackagesToBintray.json"
        user: "anlambert"
        key: "${BINTRAY_API_KEY}"
