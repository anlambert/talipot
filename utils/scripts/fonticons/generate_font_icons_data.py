# Copyright (C) 2019  The Talipot developers
#
# Talipot is a fork of Tulip, created by David Auber
# and the Tulip development Team from LaBRI, University of Bordeaux
#
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

# Script used to generate font icons related source files data

import json
import os
import sys
from collections import defaultdict

talipot_source_dir = sys.argv[1]

with open(os.path.join(talipot_source_dir, 'header.txt')) as header:
    license_header = header.read()

license_header += (
    '\n'
    '// This file is generated by the %s\n'
    '// script and is not tracked by git\n\n'
) % os.path.relpath(__file__, talipot_source_dir)


def to_upper_style(s):
    tokens = s.split('-')
    ret = ''
    for t in tokens:
        ret += t[0].upper() + t[1:]
    return ret


def version_tuple(v):
    if not v:
        return (0, 0, 0)
    return tuple(map(int, (d.split('-')[0] for d in v.split("."))))


def to_c_str(codepoint):
    return str(chr(int(codepoint, 16)).encode('utf-8'))[2:-1]


path = os.path.dirname(__file__)

open_kwargs = {'encoding': 'utf-8'}

# Font Awesome metadata file copied from
# https://github.com/FortAwesome/Font-Awesome/blob/master/metadata/icons.json
with open(os.path.join(path, 'fa-icons.json'), 'r',
          **open_kwargs) as fa_data_file:
    fa_data = json.load(fa_data_file)

fa_icons = defaultdict(list)

fa_name_replace = {
    '500px': 'px500',
    '42-group': 'group42',
    **{'%s' % i: 'digit-%s' % i for i in range(10)}
}
fa_name_replace_inv = {
    v: k for k, v in fa_name_replace.items()
}

fa_version = ''

for icon_name, icon_data in fa_data.items():
    for change in icon_data['changes']:
        if version_tuple(change) > version_tuple(fa_version):
            fa_version = change
    if icon_name in fa_name_replace:
        icon_name = fa_name_replace[icon_name]
    icon_data['name'] = icon_name
    for style in icon_data['styles']:
        fa_icons[style].append(icon_data)


fa_style_prefix = {
    'brands': 'fab',
    'regular': 'far',
    'solid': 'fas'
}

fa_constants_path = os.path.join(
    talipot_source_dir,
    'library/talipot-core/include/talipot/FontAwesomeConstants.h')
with open(fa_constants_path, 'w', **open_kwargs) as fa_constants_h:
    fa_constants_h.write(license_header)
    fa_constants = ''
    init_icon_code_points = (
        'static const flat_hash_map<const char *, pair<uint, const char *>, HashString, EqualString> iconCodePoint = {\n'
    )
    for style in sorted(fa_icons.keys()):
        style_upper = style[0].upper() + style[1:]
        fa_constants_h.write('struct TLP_SCOPE %s {\n' % style_upper)
        for icon_data in fa_icons[style]:
            icon_aliases = icon_data.get("aliases", {}).get("names", [])
            for icon_name in [icon_data['name'], *icon_aliases]:
                icon_name_prefix = '%s-%s' % (fa_style_prefix[style],
                                              icon_name)
                icon_constant_name = to_upper_style(icon_name)
                fa_constants_h.write(
                    '  static const char *%s;\n' % icon_constant_name)
                init_icon_code_points += (
                    '  {FontAwesome::%s::%s, {0x%s, "%s"}},\n' %
                    (style_upper, icon_constant_name, icon_data['unicode'],
                     to_c_str(icon_data['unicode'])))
                fa_constants += ('const char *FontAwesome::%s::%s = "%s";\n' %
                                 (style_upper, icon_constant_name,
                                  icon_name_prefix))
        fa_constants_h.write('};\n')

    init_icon_code_points += '};'

fa_sip_path = os.path.join(
    talipot_source_dir,
    'library/talipot-python/bindings/talipot-core/FontAwesome.sip')
with open(fa_sip_path, 'w', **open_kwargs) as fa_sip:
    fa_sip.write(license_header)
    fa_sip.write(('namespace tlp {\n'
                  'class FontAwesome /Abstract/ {\n'
                  '%TypeHeaderCode\n'
                  '#include <talipot/FontAwesome.h>\n'
                  '%End\n'
                  'public:\n'))
    for style in sorted(fa_icons.keys()):
        style_upper = style[0].upper() + style[1:]
        fa_sip.write('  struct %s /Abstract/ {\n' % style_upper)
        for icon_data in fa_icons[style]:
            icon_constant_name = to_upper_style(icon_data['name'])
            fa_sip.write(
                ('      static const std::string %s;\n' %
                 icon_constant_name))
        fa_sip.write('  };\n')
    fa_sip.write(('};\n'
                  '};'))

fa_data_path = os.path.join(
    talipot_source_dir,
    'library/talipot-core/src/FontAwesomeData.cpp'
)
with open(fa_data_path, 'w', **open_kwargs) as fa_data_cpp:
    fa_data_cpp.write(license_header)
    fa_data_cpp.write('%s\n' % fa_constants)
    fa_data_cpp.write(('string FontAwesome::getVersion() {\n'
                       '  return "%s";\n'
                       '}\n\n') % fa_version)
    fa_data_cpp.write('%s\n' % init_icon_code_points)

# Material Design Icons metadata file copied from
# https://github.com/Templarian/MaterialDesign-SVG/blob/master/meta.json
with open(os.path.join(path, 'md-icons.json'), 'r',
          **open_kwargs) as md_data_file:
    md_data = json.load(md_data_file)

md_version = ''

md_constants_path = os.path.join(
    talipot_source_dir,
    'library/talipot-core/include/talipot/MaterialDesignIconsConstants.h'
)
with open(md_constants_path, 'w',
          **open_kwargs) as md_constants_h:
    md_constants_h.write(license_header)
    md_constants = ''
    init_icon_code_points = (
        'static const flat_hash_map<const char *, pair<uint, const char *>, HashString, EqualString> iconCodePoint = {\n'
    )
    for icon in md_data:
        icon_constant_name = to_upper_style(icon['name'])
        md_constants_h.write(
            'static const char *%s;\n' % icon_constant_name)
        init_icon_code_points += (
            '  {MaterialDesignIcons::%s, {0x%s, "%s"}},\n' %
            (icon_constant_name, icon['codepoint'].lower(), to_c_str(icon['codepoint'].lower())))
        md_constants += ('const char *MaterialDesignIcons::%s = "%s";\n' %
                         (icon_constant_name, 'md-' + icon['name']))

        if version_tuple(icon['version']) > version_tuple(md_version):
            md_version = icon['version']
    init_icon_code_points += '};'

md_sip_path = os.path.join(
    talipot_source_dir,
    'library/talipot-python/bindings/talipot-core/MaterialDesignIcons.sip'
)
with open(md_sip_path, 'w', **open_kwargs) as md_sip:
    md_sip.write(license_header)
    md_sip.write(('namespace tlp {\n'
                  'class MaterialDesignIcons /Abstract/ {\n'
                  '%TypeHeaderCode\n'
                  '#include <talipot/MaterialDesignIcons.h>\n'
                  '%End\n'
                  'public:\n'))
    for icon in md_data:
        icon_constant_name = to_upper_style(icon['name'])
        md_sip.write(
            '  static const std::string %s;\n' % icon_constant_name)
    md_sip.write(('};\n'
                  '};'))

md_data_path = os.path.join(
    talipot_source_dir,
    'library/talipot-core/src/MaterialDesignIconsData.cpp'
)
with open(md_data_path, 'w', **open_kwargs) as md_data_cpp:
    md_data_cpp.write(license_header)
    md_data_cpp.write('%s\n' % md_constants)
    md_data_cpp.write(('string MaterialDesignIcons::getVersion() {\n'
                       '  return "%s";\n'
                       '}\n\n') % md_version)
    md_data_cpp.write('%s\n' % init_icon_code_points)

fonticons_rst_path = os.path.join(
    talipot_source_dir, 'doc/python/fonticons.rst')
with open(fonticons_rst_path, 'w', **open_kwargs) as fonticons_rst:
    for style in sorted(fa_icons.keys()):
        style_prefix = fa_style_prefix[style]
        style_upper = style[0].upper() + style[1:]
        for icon_data in fa_icons[style]:
            icon_name = icon_data['name']
            if icon_name in fa_name_replace_inv:
                icon_name = fa_name_replace_inv[icon_name]
            icon_constant_name = to_upper_style(icon_data['name'])
            fonticons_rst.write(('  * :const:`tlp.FontAwesome.%s.%s` '
                                 '(:%sicon:`%s`)\n') %
                                (style_upper, icon_constant_name, style_prefix,
                                 icon_name))
        for icon in md_data:
            icon_constant_name = to_upper_style(icon['name'])
            fonticons_rst.write(('  * :const:`tlp.MaterialDesignIcons.%s` '
                                 '(:mdicon:`%s`)\n') %
                                (icon_constant_name, icon['name']))
