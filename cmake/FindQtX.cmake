# CMake module to find required Qt5 or Qt6 modules for building Talipot. Qt5 is
# used by default, set TALIPOT_USE_QT6 CMake variable to ON to use Qt6.

# If CMake does not automatically find QtX, the root directory of the QtX
# installation must be provided in the CMAKE_PREFIX_PATH variable.

SET(QT_MAJOR_VERSION 5)
SET(QT_MIN_VERSION 5.12)

IF(TALIPOT_USE_QT6)
  SET(QT_MAJOR_VERSION 6)
  SET(QT_MIN_VERSION 6.2)
ENDIF(TALIPOT_USE_QT6)

# Unset related CMake variables in order to change the QtX version (by modifying
# the root QtX directory through the CMAKE_PREFIX_PATH variable) without having
# to delete the current CMake cache
UNSET(Qt${QT_MAJOR_VERSION}Core_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Gui_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Widgets_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Xml_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}XmlPatterns_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Network_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Multimedia_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}MultimediaWidgets_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Positioning_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}PrintSupport_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Qml_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Quick_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Sensors_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}DBus_FOUND CACHE)
UNSET(Qt${QT_MAJOR_VERSION}WebChannel_FOUND CACHE)

IF(QT_MAJOR_VERSION EQUAL 6)
  UNSET(Qt6OpenGLWidgets_FOUND CACHE)
ENDIF(QT_MAJOR_VERSION EQUAL 6)

UNSET(Qt${QT_MAJOR_VERSION}Core_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Gui_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Widgets_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Xml_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}XmlPatterns_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Network_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Multimedia_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}MultimediaWidgets_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Positioning_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}PrintSupport_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Qml_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Quick_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}Sensors_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}DBus_DIR CACHE)
UNSET(Qt${QT_MAJOR_VERSION}WebChannel_DIR CACHE)

IF(QT_MAJOR_VERSION EQUAL 6)
  UNSET(Qt6OpenGLWidgets_DIR CACHE)
  UNSET(Qt6Core5Compat_DIR CACHE)
ENDIF(QT_MAJOR_VERSION EQUAL 6)

FIND_PACKAGE(Qt${QT_MAJOR_VERSION}Widgets ${QT_MIN_VERSION} REQUIRED)
FIND_PACKAGE(Qt${QT_MAJOR_VERSION}Network ${QT_MIN_VERSION} REQUIRED)

IF(QT_MAJOR_VERSION EQUAL 6)
  FIND_PACKAGE(Qt6OpenGLWidgets ${QT_MIN_VERSION} REQUIRED)
  FIND_PACKAGE(Qt6Core5Compat ${QT_MIN_VERSION} REQUIRED)

  IF(MINGW)
    FIND_PACKAGE(Qt6EntryPointPrivate ${QT_MIN_VERSION} REQUIRED)
  ENDIF(MINGW)
ENDIF(QT_MAJOR_VERSION EQUAL 6)

STRING(REGEX MATCH "[0-9]\\.[0-9]+\\.[0-9]+" QT_VERSION
             "${Qt${QT_MAJOR_VERSION}Widgets_VERSION_STRING}")

# QtXWidgets_VERSION_STRING has been deprecated in favor of QtXWidgets_VERSION
# since a few releases of Qt5 and seems to have been removed in some Linux
# distributions (experienced on KDE Neon Developer edition that now uses Qt 5.9)
IF(NOT QT_VERSION MATCHES "[0-9]\\.[0-9]+\\.[0-9]+")
  STRING(REGEX MATCH "[0-9]\\.[0-9]+\\.[0-9]+" QT_VERSION
               "${Qt${QT_MAJOR_VERSION}Widgets_VERSION}")
ENDIF(NOT QT_VERSION MATCHES "[0-9]\\.[0-9]+\\.[0-9]+")

IF(NOT "${QT_VERSION}" STREQUAL "${LAST_FOUND_QT_VERSION}")
  MESSAGE(STATUS "Found Qt${QT_MAJOR_VERSION} (version ${QT_VERSION})")
ENDIF(NOT "${QT_VERSION}" STREQUAL "${LAST_FOUND_QT_VERSION}")

SET(LAST_FOUND_QT_VERSION
    "${QT_VERSION}"
    CACHE INTERNAL "")

IF(WIN32)
  GET_TARGET_PROPERTY(QtCore_location Qt${QT_MAJOR_VERSION}::Core LOCATION)
  GET_FILENAME_COMPONENT(QT_BINARY_DIR ${QtCore_location} PATH)
  SET(QT_BINARY_DIR ${QT_BINARY_DIR}/../bin)

  # Standard QtX installation
  IF(EXISTS ${QT_BINARY_DIR}/../plugins)
    SET(QT_PLUGINS_DIR ${QT_BINARY_DIR}/../plugins)

    # MSYS2 special case
  ELSEIF(EXISTS ${QT_BINARY_DIR}/../share/qt${QT_MAJOR_VERSION}/plugins)
    SET(QT_PLUGINS_DIR ${QT_BINARY_DIR}/../share/qt${QT_MAJOR_VERSION}/plugins)
  ENDIF()
ELSEIF(APPLE)
  GET_TARGET_PROPERTY(QtCore_location Qt${QT_MAJOR_VERSION}::Core LOCATION)
  GET_FILENAME_COMPONENT(QT_FRAMEWORKS_DIR ${QtCore_location} PATH)
  SET(QT_FRAMEWORKS_DIR ${QT_FRAMEWORKS_DIR}/..)

  IF(EXISTS ${QT_FRAMEWORKS_DIR}/../bin)
    SET(QT_BINARY_DIR ${QT_FRAMEWORKS_DIR}/../bin)
  ELSEIF(EXISTS ${QT_FRAMEWORKS_DIR}/../../../bin)
    SET(QT_BINARY_DIR ${QT_FRAMEWORKS_DIR}/../../../bin)
  ENDIF()
ELSE()
  IF(EXISTS /usr/lib/x86_64-linux-gnu/qt${QT_MAJOR_VERSION}/bin)
    SET(QT_BINARY_DIR /usr/lib/x86_64-linux-gnu/qt${QT_MAJOR_VERSION}/bin)
  ELSEIF(EXISTS /usr/lib64/qt${QT_MAJOR_VERSION}/bin)
    SET(QT_BINARY_DIR /usr/lib64/qt${QT_MAJOR_VERSION}/bin)
  ELSE()
    SET(QT_BINARY_DIR "${_qt${QT_MAJOR_VERSION}Gui_install_prefix}/bin")
  ENDIF()

  IF(EXISTS ${QT_BINARY_DIR}/qmake)
    SET(QT_QMAKE_EXECUTABLE ${QT_BINARY_DIR}/qmake)
  ELSEIF(EXISTS ${QT_BINARY_DIR}/qmake-qt${QT_MAJOR_VERSION})
    SET(QT_QMAKE_EXECUTABLE ${QT_BINARY_DIR}/qmake-qt${QT_MAJOR_VERSION})
  ENDIF()

  # Standard QtX installation
  IF(EXISTS ${QT_BINARY_DIR}/../plugins)
    SET(QT_PLUGINS_DIR ${QT_BINARY_DIR}/../plugins)
  ENDIF()
ENDIF()

SET(QT_LIBRARIES ${Qt${QT_MAJOR_VERSION}Widgets_LIBRARIES}
                 ${Qt${QT_MAJOR_VERSION}Network_LIBRARIES})

IF(QT_MAJOR_VERSION EQUAL 6)
  SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt6OpenGLWidgets_LIBRARIES})
  SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt6Core5Compat_LIBRARIES})

  IF(MINGW)
    SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt6EntryPointPrivate_LIBRARIES})
  ENDIF(MINGW)
ENDIF(QT_MAJOR_VERSION EQUAL 6)

GET_FILENAME_COMPONENT(QT_CMAKE_DIR "${Qt${QT_MAJOR_VERSION}Core_DIR}"
                       DIRECTORY)

# On Apple platform, we need to link against QtXDBus and QtXPrintSupport when
# using the official QtX bundle provided by qt.io (dylibs dependencies side
# effect). However, those modules are not necessarily present when using QtX
# from Homebrew or MacPorts, so handle those special cases here.
IF(APPLE)
  SET(QT_DBUS_CMAKE_DIR "${QT_CMAKE_DIR}/Qt${QT_MAJOR_VERSION}DBus")
  SET(QT_PRINTSUPPORT_CMAKE_DIR
      "${QT_CMAKE_DIR}/Qt${QT_MAJOR_VERSION}PrintSupport")

  IF(EXISTS ${QT_DBUS_CMAKE_DIR} AND EXISTS ${QT_PRINTSUPPORT_CMAKE_DIR})
    FIND_PACKAGE(Qt${QT_MAJOR_VERSION}DBus ${QT_MIN_VERSION})
    FIND_PACKAGE(Qt${QT_MAJOR_VERSION}PrintSupport ${QT_MIN_VERSION})

    IF(${Qt${QT_MAJOR_VERSION}DBus_FOUND}
       AND ${Qt${QT_MAJOR_VERSION}PrintSupport_FOUND})
      SET(QT_LIBRARIES
          ${QT_LIBRARIES} ${Qt${QT_MAJOR_VERSION}PrintSupport_LIBRARIES}
          ${Qt${QT_MAJOR_VERSION}DBus_LIBRARIES})
    ENDIF(${Qt${QT_MAJOR_VERSION}DBus_FOUND}
          AND ${Qt${QT_MAJOR_VERSION}PrintSupport_FOUND})
  ENDIF(EXISTS ${QT_DBUS_CMAKE_DIR} AND EXISTS ${QT_PRINTSUPPORT_CMAKE_DIR})
ENDIF(APPLE)

MACRO(QTX_SET_INCLUDES_AND_DEFINITIONS)
  INCLUDE_DIRECTORIES(${Qt${QT_MAJOR_VERSION}Widgets_INCLUDE_DIRS})
  INCLUDE_DIRECTORIES(${Qt${QT_MAJOR_VERSION}Network_INCLUDE_DIRS})
  ADD_DEFINITIONS(${Qt${QT_MAJOR_VERSION}Widgets_DEFINITIONS})
  ADD_DEFINITIONS(${Qt${QT_MAJOR_VERSION}Network_DEFINITIONS})

  IF(QT_MAJOR_VERSION EQUAL 6)
    INCLUDE_DIRECTORIES(${Qt6OpenGLWidgets_INCLUDE_DIRS})
    ADD_DEFINITIONS(${Qt6OpenGLWidgets_DEFINITIONS})
    INCLUDE_DIRECTORIES(${Qt6Core5Compat_INCLUDE_DIRS})
    ADD_DEFINITIONS(${Qt6Core5Compat_DEFINITIONS})
  ENDIF(QT_MAJOR_VERSION EQUAL 6)
ENDMACRO()

# Define aliases for Qt macros in order to build the project
IF(QT_MAJOR_VERSION EQUAL 5)
  MACRO(QT_WRAP_CPP outfiles)
    QT5_WRAP_CPP(${outfiles} ${ARGN})
  ENDMACRO(QT_WRAP_CPP outfiles)
ENDIF(QT_MAJOR_VERSION EQUAL 5)

IF(QT_MAJOR_VERSION EQUAL 5)
  MACRO(QT_WRAP_UI outfiles)
    QT5_WRAP_UI(${outfiles} ${ARGN})
  ENDMACRO()
ENDIF(QT_MAJOR_VERSION EQUAL 5)

IF(QT_MAJOR_VERSION EQUAL 5)
  MACRO(QT_ADD_RESOURCES outfiles)
    QT5_ADD_RESOURCES(${outfiles} ${ARGN})
  ENDMACRO()
ENDIF(QT_MAJOR_VERSION EQUAL 5)

# With MinGW, remove the -fPIC compiler option as it is not needed and generates
# a lot of warnings
IF(MINGW)
  STRING(REPLACE "-fPIC" ""
                 Qt${QT_MAJOR_VERSION}Widgets_EXECUTABLE_COMPILE_FLAGS
                 "${Qt${QT_MAJOR_VERSION}Widgets_EXECUTABLE_COMPILE_FLAGS}")
ENDIF(MINGW)
