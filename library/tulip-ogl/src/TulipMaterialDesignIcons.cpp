/**
 *
 * Copyright (C) 2019  The Talipot developers
 *
 * Talipot is a fork of Tulip, created by David Auber
 * and the Tulip development Team from LaBRI, University of Bordeaux
 *
 * See the AUTHORS file at the top-level directory of this distribution
 * License: GNU General Public License version 3, or any later version
 * See top-level LICENSE file for more information
 *
 */

#include <cstring>
#include <tulip/TulipMaterialDesignIcons.h>
#include <tulip/TlpTools.h>

#include <utf8.h>

#include <algorithm>
#include <map>

using namespace std;

namespace tlp {

struct cmpCharPtr {
  bool operator()(const char *s1, const char *s2) const {
    return strcmp(s1, s2) < 0;
  }
};
static map<const char *, unsigned int, cmpCharPtr> iconCodePoint;
static vector<std::string> iconsNames;

static inline void addIconCodePoint(const char *iconName, unsigned int codePoint) {
  iconCodePoint[iconName] = codePoint;
}

// code generated by generate_md_init_cpp_code.sh
#include "TulipInitMaterialDesignIcons.cpp"

std::string TulipMaterialDesignIcons::getTTFLocation() {
  return string(tlp::TulipBitmapDir).append("materialdesignicons-webfont.ttf");
}

std::string TulipMaterialDesignIcons::getWOFFLocation() {
  return string(tlp::TulipBitmapDir).append("materialdesignicons-webfont.woff");
}

std::string TulipMaterialDesignIcons::getWOFF2Location() {
  return string(tlp::TulipBitmapDir).append("materialdesignicons-webfont.woff2");
}

bool TulipMaterialDesignIcons::isIconSupported(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  return iconCodePoint.find(iconName.c_str()) != iconCodePoint.end();
}

const vector<std::string> &TulipMaterialDesignIcons::getSupportedIcons() {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  return iconsNames;
}

unsigned int TulipMaterialDesignIcons::getIconCodePoint(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  auto it = iconCodePoint.find(iconName.c_str());

  if (it != iconCodePoint.end())
    return (it->second);

  return 0;
}

std::string TulipMaterialDesignIcons::getIconFamily(const std::string &) {
  return "materialdesignicons";
}

std::string TulipMaterialDesignIcons::getIconUtf8String(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  std::string iconString;
  utf8::append(iconCodePoint[iconName.c_str()], back_inserter(iconString));
  return iconString;
}
} // namespace tlp
