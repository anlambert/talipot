# Always prefer setuptools over distutils
import fnmatch
import os
import platform
import shutil
import subprocess
import sys

from setuptools import setup
from setuptools.dist import Distribution

try:
    from wheel._bdist_wheel import get_platform
except ImportError:
    from wheel.bdist_wheel import get_platform
from wheel.bdist_wheel import bdist_wheel

# On MacOS, we need to relink dylibs and set correct rpaths in
# order for the modules to be imported in a portable way when
# distributed through pip
if platform.system() == "Darwin" and len(sys.argv) > 1 and sys.argv[1] == "bdist_wheel":

    def getDyLibDependencies(dylib):
        otool = subprocess.check_output("otool -L %s" % dylib, shell=True)
        otool = otool.decode("utf-8")
        L = otool.split("\n")[1:-1]
        L = map(lambda d: d[1:].split(" ")[0], L)
        L = filter(
            lambda d: "/usr/lib" not in d
            and "/System" not in d
            and "Python" not in d
            and "@rpath" not in d,
            L,
        )
        return set(L)

    def relinkDyLibAndSetRpaths(dylib, rpaths=[]):
        libs = getDyLibDependencies(dylib)
        for L in libs:
            subprocess.call(
                f"install_name_tool -change {L} @rpath/{os.path.basename(L)} {dylib} 2>/dev/null",
                shell=True,
            )
        # add rpaths in dylib
        for rpath in rpaths:
            subprocess.call(
                f"install_name_tool -add_rpath {rpath} {dylib} 2>/dev/null",
                shell=True,
            )

    def relinkDyLibsInDirAndSetRpaths(dirPath, rpaths):
        for lib in os.listdir(dirPath):
            if not fnmatch.fnmatch(lib, "*.py"):
                libPath = dirPath + lib
                if not os.path.isdir(libPath):
                    relinkDyLibAndSetRpaths(libPath, rpaths)

    def copyDyLibsDependencies(dirPath, relativeCopyPath="./"):
        lastNbProcessed = 0
        toProcess = os.listdir(dirPath)
        while lastNbProcessed == 0 or len(toProcess) > lastNbProcessed:
            for lib in toProcess:
                if not fnmatch.fnmatch(lib, "*.py"):
                    libPath = dirPath + lib
                    if not os.path.isdir(libPath):
                        libs = getDyLibDependencies(libPath)
                        for L in libs:
                            filename = os.path.basename(L)
                            dylibCopy = dirPath + relativeCopyPath + filename
                            if not os.path.isfile(dylibCopy):
                                shutil.copyfile(L, dylibCopy)
                                subprocess.call(
                                    f"install_name_tool -id @rpath/{filename} {dylibCopy} 2>/dev/null",
                                    shell=True,
                                )
            lastNbProcessed = len(toProcess)
            toProcess = os.listdir(dirPath)

    talipotNativeLibsPath = os.getcwd() + "/talipot/native/"
    talipotNativePluginsLibsPath = os.getcwd() + "/talipot/native/plugins/"
    talipotGraphvizPluginsLibsPath = os.getcwd() + "/talipot/native/graphviz/"

    print("Copying dylibs dependencies in talipot wheel ...")
    copyDyLibsDependencies(talipotNativeLibsPath)
    copyDyLibsDependencies(talipotNativePluginsLibsPath, "../")
    copyDyLibsDependencies(talipotGraphvizPluginsLibsPath, "../")
    print("Relinking dylibs and setting rpaths in talipot wheel ...")
    relinkDyLibsInDirAndSetRpaths(talipotNativeLibsPath, ["@loader_path/"])
    relinkDyLibsInDirAndSetRpaths(talipotNativePluginsLibsPath, ["@loader_path/.."])
    relinkDyLibsInDirAndSetRpaths(talipotGraphvizPluginsLibsPath, ["@loader_path/.."])


class BinaryDistribution(Distribution):
    def is_pure(self):
        return False

    def has_ext_modules(self):
        return True


talipot_native_libs = []
if platform.system() == "Windows":
    talipot_native_libs = [
        "native/*.pyd",
        "native/*.dll",
        "native/plugins/*.dll",
        "native/graphviz/*.dll",
    ]
    # on Windows, call a CMake script that will gather all the required DLLs
    # to import the modules and copy them to the wheel native folder
    command = (
        '"${CMAKE_COMMAND}" -DCWD=%s '
        "-DLIBRARY_PATHS=${CMAKE_LIBRARY_PATH} "
        "-P copyTalipotCoreDllDependencies.cmake"
    ) % os.getcwd()
    p = subprocess.call(command, shell=True)
elif platform.system() == "Darwin":
    talipot_native_libs = [
        "native/*.so",
        "native/*.dylib",
        "native/plugins/*.dylib",
        "native/graphviz/*.dylib",
    ]
elif platform.system() == "Linux":
    talipot_native_libs = [
        "native/*.so*",
        "native/plugins/*.so",
        "native/graphviz/*.so",
    ]


class CustomWheel(bdist_wheel):
    """Override platform tags on macOS when building a wheel."""

    def finalize_options(self):
        platform_name = get_platform("_")
        if "universal2" in platform_name:
            self.plat_name = platform_name.replace(
                "universal2", platform.uname().machine
            )
        super().finalize_options()


setup(
    package_data={"talipot": talipot_native_libs},
    distclass=BinaryDistribution,
    cmdclass={"bdist_wheel": CustomWheel},
)
