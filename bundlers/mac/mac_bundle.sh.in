#!/bin/sh

function usage {
    echo "Usage : $0 <Bundle Destination Dir> [<Application Name>=Talipot]"
}

APP_NAME=Talipot

if [ $# -eq 2 ]
then
    APP_NAME=$2
else
    if [ $# -ne 1 ]
    then
        usage $0
        exit 1
    fi
fi

TALIPOT_DIR=@CMAKE_INSTALL_PREFIX@
DEST_DIR=$1
SRC_DIR=@talipot_SOURCE_DIR@/bundlers/mac
PYTHON_BUILD=@TALIPOT_BUILD_PYTHON_COMPONENTS@
QT_BINARY_DIR=@QT_BINARY_DIR@

if [ "${QT_BINARY_DIR}" = "" ]
then
    QT_BINARY_DIR=@_qt5Gui_install_prefix@/bin
fi

if [ ! -d ${TALIPOT_DIR} ]
then
    echo "Error : the specified Talipot installation directory does not exist"
    exit 1
fi

echo "Wiping previous bundles into ${DEST_DIR}"
rm -rf "${DEST_DIR}/application" 2>/dev/null
rm -f "${DEST_DIR}/${APP_NAME}-@TalipotVersion@.dmg" 2>/dev/null
mkdir -p "${DEST_DIR}/application"
cd "${DEST_DIR}/application"
mkdir .background
cp "${SRC_DIR}/background.png" .background/
rm -rf * 2>/dev/null

echo 'Creating base directories'
cd "${DEST_DIR}/application"
mkdir -p Talipot.app/Contents/{MacOS,Resources,Frameworks}
cd Talipot.app/Contents
cp "${SRC_DIR}/talipot.icns" Resources/
cp "${SRC_DIR}/Info.plist" .

echo 'Copying binaries & libraries'
cd "${DEST_DIR}/application/Talipot.app/Contents/"
cp -r "${TALIPOT_DIR}"/* .
mv lib/*.dylib Frameworks/
rm -rf include
rm -rf lib/cmake
rm lib/talipot/python/*.pyc lib/talipot/python/*.pyo 2>/dev/null
rm lib/talipot/python/talipot/*.pyc lib/talipot/python/talipot/*.pyo 2>/dev/null
rm lib/talipot/python/talipotgui/*.pyc lib/talipot/python/talipotgui/*.pyo 2>/dev/null

echo 'Copying license'
cd "${DEST_DIR}/application"
cp "${SRC_DIR}/../../LICENSE" .

QT_LIB_DIR="@QT_QTCORE_LIBRARY@/.."
echo 'Copying Resources'
cd "${DEST_DIR}/application/Talipot.app/Contents/Frameworks/"
cp -r "${QT_LIB_DIR}/QtGui.framework/Resources/qt_menu.nib" ../Resources 2>/dev/null
cp "@QT_QTCLUCENE_LIBRARY@" . 2>/dev/null

# use macdeployqt to configure exe & libraries
cd ..
# configure talipot & talipot_perspective
mv bin/talipot MacOS/Talipot
# run macdeployqt with talipot_perspective as an other executable to update
# but also the Talipot Python dynamic modules (not processed by macdeployqt as
# they are suffixed by .so instead of .dylib)
if [ "$PYTHON_BUILD" = "ON" ]
then
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Talipot.app -executable=${DEST_DIR}/application/Talipot.app/Contents/bin/talipot_perspective -executable=${DEST_DIR}/application/Talipot.app/Contents/lib/talipot/python/talipot/native/_talipot.so -executable=${DEST_DIR}/application/Talipot.app/Contents/lib/talipot/python/talipotgui/native/_talipotgui.so
else
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Talipot.app -executable=${DEST_DIR}/application/Talipot.app/Contents/bin/talipot_perspective
fi
mv MacOS/Talipot bin/talipot
# rename
mv ${DEST_DIR}/application/Talipot.app ${DEST_DIR}/application/${APP_NAME}-@TalipotVersion@.app

# create launcher
cat > MacOs/Talipot <<EOF
#!/bin/sh

wd="\${0%/*}"
cd "\$wd/.."

export DYLD_FRAMEWORK_PATH="\$(pwd)/Frameworks"
export DYLD_FALLBACK_LIBRARY_PATH="\$(pwd)/Frameworks"
export QT_QPA_PLATFORM_PLUGIN_PATH="\$(pwd)/PlugIns/platforms"
export QT_PLUGIN_PATH="\$(pwd)/PlugIns"
"\$(pwd)"/bin/talipot

EOF
# make it executable
chmod +x MacOS/Talipot

# generate dmg
echo 'Generating DMG'
cd "${DEST_DIR}"
sh "${SRC_DIR}/make_dmg.sh" ${APP_NAME} "@TalipotVersion@" "${DEST_DIR}/application"

# rename dmg if needed
if [ "$PYTHON_BUILD" = "ON" ]
then
echo "${APP_NAME}-@TalipotVersion@.dmg has been correctly generated in ${DEST_DIR}"
mv ${APP_NAME}-@TalipotVersion@.dmg ${APP_NAME}-@TalipotVersion@.dmg
else
echo "${APP_NAME}-@TalipotVersion@_no_python.dmg has been correctly generated in ${DEST_DIR}"
mv ${APP_NAME}-@TalipotVersion@.dmg ${APP_NAME}-@TalipotVersion@_no_python.dmg
fi
